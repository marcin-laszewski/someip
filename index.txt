someip
======
Marcin Laszewski Marcin.Laszewski@aptiv.com
:toc:

Funkcjonalności
---------------
*	Wymiana komunikatów _someip_ z wykorzystaniem transmisji pakietowej
	i strumieniowej w sieciach IP i Unix (we wszystkich kombinacjach):
|===========================================
|	| DGRAM			| STREAM
| Unix	| Pakiety		| Strumienie
| IP	| UDP/IP		| TCP/IP
|===========================================
*	Współpracuje z VSOMEIP.
*	Przykładowe aplikacje - kalkulator.
*	Środowisko przetestowane: _Linux_, _GCC_, _libc_.
	..	W trakcie testowania: Windows, MinGW, Cygwin.
*	Konfiguracja ad-hoc w postaci parametrów uruchomianego programu.
*	Połączenia strumieniowe:
	..	Jedna sesja pozwala na przesłanie dowolnej liczby
		komunikatów transakcyjnych.
	..	Tylko jedna aktyna sesja (na tą chwilę).
	..	Możliwość fizycznego odłączenia stacji gdy nie jest
		nic przesyłane.
*	Wspólny kod zestawiający połączenie w domenie UNIX oraz IP.
*	Wspólny kod dla połączeń datagramowych i strumieniowych.
*	Serwer - asynchroniczny w połączeniach datagramowych.
*	Łatwe do wstawienia w kod z generatorów.

TODO
----
*	Windows (MinGW, Cygwin) - w trakcie.
*	Jak wygląda (powinna wyglądać) sesja w połączeniu strumieniowym:
	każda transakcja w oddzielnym połączeniu?
*	Oddzielić część aplikacyjną (np. obliczenia kalkulatora po stronie
	serwera oraz interface użytkownika) od transportu (SOMEIP + transport).
*	Jak ma wyglądać współbieżność serwera dla połączeń strumieniowych -
	wątki, procesy czy wszystko w zakresie jednej sesji?
*	Testy wydajności:
	..	Strumienie vs. datagramy.
	..	Unix vs. sieć IP.
	..	someip vs. VSOMEIP.
*	Serializacja na podstawie specyfikacji dla generatorów (deployment
	files).

Kompilacja
----------
....................................
$ make all
[CC]     hello/cli.o
[CC]     ../libml/file/select/read.o
[CC]     ../libml/net/addr.o
[CC]     ../libml/net/addr/hostent.o
[CC]     ../libml/net/addr/name.o
[CC]     ../libml/net/udp/socket.o
[CC]     print/data.o
[CC]     print/hdr.o
[CC]     print/msg.o
[CC]     print/recv.o
[CC]     recv.o
[CC]     send.o
[CC]     type/text.o
[LD]     hello/hello-cli
[CC]     hello/srv.o
[CC]     ../libml/file/select/write.o
[CC]     ../libml/net/inet/bind/any.o
[LD]     hello/hello-srv
.....................................

Parametry
---------

Serwer
~~~~~~

--client id::	SOMEIP klient id
--method id::	SOMEIP method id
--service id::	SOMEIP service id
--session id::	SOMEIP session id
--protocol id:	SOMEIP protocol id
--print-data::	Pokaż zawartość _payload_ w postaci _ASCII_ lub
		_HEX_ dla znaków niedrukowalnych.
--print-hdr::	Pokaż zawartość nagłówka SOMEIP.
--print-recv::	Pokaż status operacji wejścia/wyjścia.
--udp port::	Port dla transmsji UDP.
--unix-dgram path::	Ścieżka plikowa dla pakietowej transmisji
			_unix_.
--unix-stream path::	Ścieżka plikowa dla strumieniowej
			ransmisji _unix_.

Klient
~~~~~~

--loop ms::	Ciągłe powatarzanie zapytań (do testów, np. wydajności).
--timeout sec::	Limit czasowy na realizację ransakcji w sekundach.
--print-data::	Pokaż zawartość _payload_ w postaci _ASCII_ lub
		_HEX_ dla znaków niedrukowalnych.
--print-hdr::	Pokaż zawartość nagłówka SOMEIP.
--print-recv::	Pokaż status operacji wejścia/wyjścia.
--stdin::	Wczytwanie poleceń ze standrdowego wejścia.
--udp inet-addr port::
		Adress (ip lub nazwa) oraz port dla transmsji UDP.
--unix-dgram path::
		Ścieżka plikowa serwera dla pakietowje transmisji _unix_.
--unix-dgram-local path::
		Ścieżka plikowa klienta dla pakietowej transmisji _unix_.
--client id::	SOMEIP klient id
--method id::	SOMEIP method id
--service id::	SOMEIP service id
--session id::	SOMEIP session id


Przykłady
---------

Serwer
~~~~~~
..........................
$ make run-hello/hello-srv
./hello/hello-srv --udp 30509
..........................

Klient
~~~~~~
...............................
$ make run-hello/hello-cli
./hello/hello-cli \
        --udp 127.0.0.1 30509 \
        --service 0x1111 \
        --method 0x3333 \
        --client 0x5555 \
        --session 1 \
        --print-recv \
        --print-hdr \
        --print-data \
        --stdin
cmd>
...............................

Obsługa klienta
---------------

Klient czeka na polecenia do wykonania:

*ENTER* _(pusta linia)_::	Wykaz poleceń.
*CTRL+D* (koniec danych)::	Zakończenie działania klienta.
abs x::		Wartość bezwzględna _|x|_.
cos x::		Funkcja trygonometryczna: _sin(x)_
div x y::	Dzielenie: _x / _y_
mul x y::	Mnożenie: _x * y_
pow2 x::	Potęga drugiego stopnia: _x^2_
sin x::		Funkcja trygonometryczna: _cos(x)_
sub x y::	Odejmowanie: _x - y_
sum x y::	Dodawania: _x + y_

Przykłady
~~~~~~~~~
..............................
$ make run-hello/hello-cli
./hello/hello-cli \
        --udp 127.0.0.1 30509 \
        --service 0x1111 \
        --method 0x3333 \
        --client 0x5555 \
        --session 1 \
        --print-recv \
        --print-hdr \
        --print-data \
        --stdin
cmd> [ENTER]
List of command:
        abs
        cos
        div
        mul
        pow2
        sin
        sub
        sum
cmd> abs -5
service:        0x1111
method: 0x3337
length: 16
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x00    REQUEST
code:   0x00
data:   00 00 00 00 00 00 14 C0

recv:   24
service:        0x1111
method: 0x3337
length: 16
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x80    RESPONSE
code:   0x00
data:   00 00 00 00 00 00 14 "@"

[1111.3337] Result: 5

cmd> div 3.14 6
service:        0x1111
method: 0x3341
length: 24
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x00    REQUEST
code:   0x00
data:   1F 85 EB "Q" B8 1E 09 "@" 00 00 00 00 00 00 18 "@"

recv:   24
service:        0x1111
method: 0x3341
length: 16
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x80    RESPONSE
code:   0x00
data:   BF "X" F2 8B "%" BF E0 "?"

[1111.3341] Result: 0.523
cmd> sin 0.523
service:        0x1111
method: 0x3335
length: 16
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x00    REQUEST
code:   0x00
data:   "#" DB F9 "~j" BC E0 "?"

recv:   24
service:        0x1111
method: 0x3335
length: 16
client: 0x5555
session:        0x0001
proto:  0x01
iface:  0x00
type:   0x80    RESPONSE
code:   0x00
data:   "&" 84 BA A5 80 F7 DF "?"

[1111.3335] Result: 0.499
cmd> CTRL+D
$
..............................
